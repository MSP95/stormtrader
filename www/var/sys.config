[{phoenix,
     [{filter_parameters,[<<"password">>]},
      {serve_endpoints,false},
      {template_engines,[]},
      {gzippable_exts,
          [<<".js">>,<<".css">>,<<".txt">>,<<".text">>,<<".html">>,
           <<".json">>,<<".svg">>]},
      {format_encoders,[]},
      {stacktrace_depth,nil}]},
 {postgrex,[{type_server_reap_after,180000}]},
 {connection,[]},
 {cowlib,[]},
 {mix,[{colors,[]}]},
 {elixir,
     [{ansi_enabled,false},
      {time_zone_database,'Elixir.Calendar.UTCOnlyTimeZoneDatabase'},
      {check_endianness,true}]},
 {phoenix_html,
     [{csrf_token_generator,
          {'Elixir.Plug.CSRFProtection',get_csrf_token,[]}}]},
 {public_key,[]},
 {cowboy,[]},
 {stdlib,[]},
 {logger,
     [{discard_threshold,500},
      {level,info},
      {handle_otp_reports,true},
      {translators,[{'Elixir.Logger.Translator',translate}]},
      {translator_inspect_opts,[]},
      {console,
          [{format,<<"$time $metadata[$level] $message\n">>},
           {metadata,[request_id]}]},
      {compile_time_purge_level,debug},
      {discard_threshold_for_error_logger,500},
      {truncate,8096},
      {compile_time_purge_matching,[]},
      {handle_sasl_reports,false},
      {discard_threshold_periodic_check,30000},
      {sync_threshold,20},
      {backends,[console]},
      {utc_log,false},
      {compile_time_application,nil}]},
 {decimal,[]},
 {distillery,[{config_providers,[]}]},
 {eex,[]},
 {compiler,[]},
 {stormtrader,
     [{'Elixir.StormtraderWeb.Endpoint',
          [{render_errors,
               [{view,'Elixir.StormtraderWeb.ErrorView'},
                {accepts,[<<"html">>,<<"json">>]}]},
           {pubsub,
               [{name,'Elixir.Stormtrader.PubSub'},
                {adapter,'Elixir.Phoenix.PubSub.PG2'}]},
           {load_from_system_env,true},
           {url,[{host,<<"localhost">>},{port,nil}]},
           {cache_static_manifest,<<"priv/static/cache_manifest.json">>},
           {server,true},
           {root,<<".">>},
           {version,"0.0.1"},
           {secret_key_base,
               <<"ZkV4PiN1SYVT4ryd7e8Gil3q2KqelpW5EL6+fV9sAEFfwiBFntLIxxGlu512fje5">>}]},
      {ecto_repos,['Elixir.Stormtrader.Repo']},
      {'Elixir.Stormtrader.Repo',
          [{adapter,'Elixir.Ecto.Adapters.Postgres'},
           {username,<<"manish">>},
           {password,<<"postgres">>},
           {database,<<"stormtrader_prod">>},
           {pool_size,15}]}]},
 {sasl,[{errlog_type,error},{sasl_error_logger,false}]},
 {kernel,
     [{logger_sasl_compatible,false},
      {logger_level,notice},
      {logger,
          [{handler,default,logger_std_h,
               #{config => #{type => standard_io},
                 formatter =>
                     {logger_formatter,
                         #{legacy_header => true,single_line => false}}}}]}]},
 {gettext,[{default_locale,<<"en">>}]},
 {phoenix_pubsub,[]},
 {ssl,[]},
 {crypto,[{rand_cache_size,896},{fips_mode,false}]},
 {phoenix_ecto,[{exclude_ecto_exceptions_from_plug,[]}]},
 {poolboy,[]},
 {plug,[{validate_header_keys_during_test,true}]},
 {mime,[]},
 {iex,
     [{history_size,20},
      {alive_prompt,<<"%prefix(%node)%counter>">>},
      {colors,[]},
      {inspect,[{pretty,true}]},
      {default_prompt,<<"%prefix(%counter)>">>}]},
 {ecto,[{postgres_map_type,<<"jsonb">>},{json_library,'Elixir.Poison'}]},
 {poison,[]},
 {runtime_tools,[]},
 {artificery,[]},
 {db_connection,[]},
 {asn1,[]},
 {ranch,[]}].
